You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
Note: Given n will be a positive integer.
// input: n, the number of steps 
// output: distinct ways to reach n 
// contraints: increment of 1 || 2
// input(3)
// n!
// 0 -- 1 -- 2 -- 3
// 0 -- 2 -- 3
// 0 -- 1 -- 3

const distinctWays = (n) => {

    let start = 0; 
    let arr = [];
    while (n < arr.length) {

    }
}
Example 1:
Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:
Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step



Given an array nums, write a function to move all 0's to the end of it while 
maintaining the relative order of the non-zero elements.
Example:
Input: [0,1,0,3,12]
Output: [1,3,12,0,0]
Note:
Minimize the total number of operations.

function moveZerosToEnd(arr) {
  const nums = []; // [1,3,12]
  arr.forEach(el => {
    if (el > 0){
      nums.push(el);
    }
  });

  const zeros = [].fill(0, arr.length - nums.length) 

  return nums.concat(zeros)
}





Given a string containing just the characters '(', ')', '{', '}', '[' and ']',
 determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.
const validParentheses = (string) => {
    let currentChar = string[0]; 
    let newArr = [];
    for (let i = 1; i < string.length; i++) {
        if (currentChar === string[i]) {
            newArr.push(currentChar, string[i]);
        }
    }
}
Example 1:
Input: "()"
Output: true
Example 2:
Input: "()[]{}"
Output: true
Example 3:
Input: "(]"
Output: false
Example 4:
Input: "([)]"
Output: false
Example 5:
Input: "{[]}"
Output: true


You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.
Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.
Example:
Given n = 5, and version = 4 is the first bad version.
call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true
Then 4 is the first bad version. 
